// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"

// slic.h
integers_matrix run_slic(integers_matrix m, int step, int nc, int con, int type);
extern "C" SEXP _slicr_run_slic(SEXP m, SEXP step, SEXP nc, SEXP con, SEXP type) {
  BEGIN_CPP11
    return cpp11::as_sexp(run_slic(cpp11::as_cpp<cpp11::decay_t<integers_matrix>>(m), cpp11::as_cpp<cpp11::decay_t<int>>(step), cpp11::as_cpp<cpp11::decay_t<int>>(nc), cpp11::as_cpp<cpp11::decay_t<int>>(con), cpp11::as_cpp<cpp11::decay_t<int>>(type)));
  END_CPP11
}

extern "C" {
/* .Call calls */
extern SEXP _slicr_run_slic(SEXP, SEXP, SEXP, SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_slicr_run_slic", (DL_FUNC) &_slicr_run_slic, 5},
    {NULL, NULL, 0}
};
}

extern "C" void R_init_slicr(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
