// Generated by cpp11: do not edit by hand
// clang-format off

#include <cpp11/R.hpp>
#include <Rcpp.h>
using namespace Rcpp;
#include "cpp11/declarations.hpp"

// slic.h
list run_slic(integers mat, doubles_matrix vals, int k, double nc, bool con, bool centers, std::string type, int iter);
extern "C" SEXP _supercells_run_slic(SEXP mat, SEXP vals, SEXP k, SEXP nc, SEXP con, SEXP centers, SEXP type, SEXP iter) {
  BEGIN_CPP11
    return cpp11::as_sexp(run_slic(cpp11::as_cpp<cpp11::decay_t<integers>>(mat), cpp11::as_cpp<cpp11::decay_t<doubles_matrix>>(vals), cpp11::as_cpp<cpp11::decay_t<int>>(k), cpp11::as_cpp<cpp11::decay_t<double>>(nc), cpp11::as_cpp<cpp11::decay_t<bool>>(con), cpp11::as_cpp<cpp11::decay_t<bool>>(centers), cpp11::as_cpp<cpp11::decay_t<std::string>>(type), cpp11::as_cpp<cpp11::decay_t<int>>(iter)));
  END_CPP11
}
// slic.h
list run_slic2(integers mat, doubles_matrix vals, int k, double nc, bool con, bool centers, std::string type, int iter);
extern "C" SEXP _supercells_run_slic2(SEXP mat, SEXP vals, SEXP k, SEXP nc, SEXP con, SEXP centers, SEXP type, SEXP iter) {
  BEGIN_CPP11
    return cpp11::as_sexp(run_slic2(cpp11::as_cpp<cpp11::decay_t<integers>>(mat), cpp11::as_cpp<cpp11::decay_t<doubles_matrix>>(vals), cpp11::as_cpp<cpp11::decay_t<int>>(k), cpp11::as_cpp<cpp11::decay_t<double>>(nc), cpp11::as_cpp<cpp11::decay_t<bool>>(con), cpp11::as_cpp<cpp11::decay_t<bool>>(centers), cpp11::as_cpp<cpp11::decay_t<std::string>>(type), cpp11::as_cpp<cpp11::decay_t<int>>(iter)));
  END_CPP11
}

extern "C" {
/* .Call calls */
extern SEXP _supercells_run_slic(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
extern SEXP _supercells_run_slic2(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_supercells_run_slic",  (DL_FUNC) &_supercells_run_slic,  8},
    {"_supercells_run_slic2", (DL_FUNC) &_supercells_run_slic2, 8},
    {NULL, NULL, 0}
};
}

extern "C" void R_init_supercells(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
